#!/bin/bash

check_p() #Devuelve una respuesta en funcion del codigo stdout
{
	[ $? = 0 ] && echo -e "\e[32mOk.\e[0m $1" || echo -e "\e[91mERROR.\e[0m $1"
}
dpkg_solved() #Intenta solventar cualquier problema con la instalacion de algun paquete
{
[ $? != 0 ] && dpkg --configure -a; apt install -f -y; apt autoremove; mv /var/lib/dpkg/info/"${pack/ /}".* /tmp; apt --fix-broken install; apt update; apt install $pack --allow-remove-essential -y;
}
confirm_install() #Confirma la instalacion de las dependencias
{
echo -e "\e[91mPackages needed: \e[93m${falta[@]}\e[0m \e[91m Install? (y/n/e)\e[0m"
read -N1 -s install
	if [ $install = "y" ]
	then
		for pack in "${falta[@]}"
		do
		apt install $pack --allow-remove-essential -y
		dpkg_solved
		done
	config_all
	else
	[ $install = "e" ] && exit
	echo -e "\e[93mWARNING:\e[0m Packages: (${falta[@]/ /}) are missing."
	echo "Starting domain config..."
	config_all
	exit
	fi
}
add() #Comprueba que paquetes estan instalados y cuales faltan para posteriormente almacenarlos y mostrarlos
{
if [ $? != 0 ]
then
        $i=1 > /dev/null 2>&1
	falta+=("$i");
else
        [ $once = "0" ] && echo -e " \e[32mOk\e[0m";
        $i=0 > /dev/null 2>&1
        once=1
fi

}
config_samba() #Configuracion del dominio y rol del equipo
{
	mv /etc/samba/smb.conf /etc/samba/smb.conf.copy > /dev/null 2>&1
	echo -e "\e[32m+========================+\e[0m"
	samba-tool domain provision
	if [ $? != 0 ]; then
		echo -e "\e[91mERROR:\e[0m samba-tool provided an exit code (1)"
		exit
	else
		echo -e "\e[32m+========================+\e[0m"
		echo "Checking services..."
		echo -e -n "\e[93mSamba... \e[0m"
		mv /var/lib/samba/private/krb5.conf /etc > /dev/null 2>&1
		systemctl stop smbd winbind systemd-resolved > /dev/null 2>&1
		systemctl disable smbd nmbd winbind systemd-resolved > /dev/null 2>&1
		systemctl start samba-ad-dc > /dev/null 2>&1
		systemctl enable samba-ad-dc > /dev/null 2>&1
		systemctl unmask samba-ad-dc > /dev/null 2>&1
		systemctl enable samba-ad-dc > /dev/null 2>&1
		systemctl restart samba-ad-dc > /dev/null 2>&1
		systemctl start samba-ad-dc > /dev/null 2>&1
		check_p
	fi
}
config_apache()
{
	echo -e -n "\e[93mApache... \e[0m"
	systemctl start apache2 > /dev/null 2>&1
	systemctl enable apache2 > /dev/null 2>&1
	systemctl status apache2 > /dev/null 2>&1
	check_p
}
config_ufw() #Configuracion del funcionamiento y estado del firewall
{
	echo -e -n "\e[93mUfw... \e[0m"
	ufw allow 'Apache' > /dev/null 2>&1
	if [[ `sudo ufw status > /dev/null 2>&1 | cut -d":" -f2 | xargs` == "inactive" ]]
	then
	read -N1 -s -p "Firewall (ufw) it's not enabled. Enable it? (y/n)" ufw
	[ $ufw = "y" ] && ufw enable > /dev/null 2>&1; check_p;
	else check_p
	fi
}
config_red()
{
	echo -e -n "\e[93mRed... \e[0m"
	read -N1 -s -p "Change network config? (y/n) " change_net
		if [ $change_net = "y" ]; then
		net_interfaces
		fi
}
net_interfaces()
{
net=("target" \ "ip" \ "network" \ "gateway" \ "netmask")
for i in ${net[@]}
do
read -p "$i: " $i
done
echo -e "#auto $target\n#iface $target inet static\n#   address $ip\n#   network $network\n#   netmask $netmask\n#   gateway $gateway" >> prueba_red
nano /etc/network/interfaces

/etc/init.d/networking restart
}
net_netplan()
{
eval
}
config_all()
{
	config_samba
	config_apache
	config_bind
	config_ufw
}
[ "$UID" -ne "0" ] && echo -e "\e[93mWARNING:\e[0m It's recomended to execute as root to prevent any error."
if [ -z $1 ]; then
	# Array con los paquetes necesarios para todo el proceso
	packages=("samba" \ "smbclient" \ "winbind" \ "apache2" \ "ufw" \ "webmin" \ "wget" \ "openssl" \ "perl" \ "python")
	once=0
	# Comprueba las dependencias
	echo -e -n "\e[32mCheking dependencies...\e[0m"
	for i in "${packages[@]}"
	do
	dpkg -s $i > /dev/null 2>&1
		add
	done
	[ "${falta}" != "" ] && confirm_install || config_all
else config_$1
fi

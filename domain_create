#!/bin/bash
load()
{
echo -n ""
bar="/|\\-/|\\-"
  while :
  do
    for i in `seq 0 7`
    do
      echo -n "${bar:$i:1}"
      echo -en "\010"
      sleep 0.2
    done
  done
}
check_p() #Devuelve una respuesta en funcion del codigo stdout
{
	[ $? = 0 ] && echo -e "\e[32mOk.                         \e[0m $1" || echo -e "\e[91mERROR.                         \e[0m $1"
}
dpkg_solved() #Intenta solventar cualquier problema con la instalacion de algun paquete
{
[ $? != 0 ] && dpkg --configure -a; apt install -f -y; apt autoremove; mv /var/lib/dpkg/info/"${pack/ /}".* /tmp; apt --fix-broken install; apt update; apt install $pack --allow-remove-essential -y;
}
confirm_install() #Confirma la instalacion de las dependencias
{
echo -e "\e[91mPackages needed: \e[93m${falta[@]}\e[0m \e[91m Install? (y/n/e)\e[0m"
read -N1 -s install
	if [ $install = "y" ]
	then
		for pack in "${falta[@]}"
		do
		apt install $pack --allow-remove-essential -y
		dpkg_solved
		done
	config_all
	else
	[ $install = "e" ] && exit
	echo -e "\e[93mWARNING:\e[0m Packages: (${falta[@]/ /}) are missing."
	echo "Starting domain config..."
	config_all
	exit
	fi
}
add() #Comprueba que paquetes estan instalados y cuales faltan para posteriormente almacenarlos y mostrarlos
{
if [ $? != 0 ]
then
        $i=1 > /dev/null 2>&1
	falta+=("$i");
else
        [ $once = "0" ] && echo -e " \e[32mOk\e[0m";
        $i=0 > /dev/null 2>&1
        once=1
fi

}
config_samba() #Configuracion del dominio y rol del equipo
{
	mv /etc/samba/smb.conf /etc/samba/smb.conf.copy > /dev/null 2>&1
	echo -e "\e[32m+========================+\e[0m"
	samba-tool domain provision
	if [ $? != 0 ]; then
		echo -e "\e[91mERROR:\e[0m samba-tool provided an exit code ($?)"
		exit
	else
		echo -e "\e[32m+========================+\e[0m"
		echo "Checking services..."
		echo -e -n "\e[93mSamba... \e[0m"
		load &
		spin_pid=$!
		mv /var/lib/samba/private/krb5.conf /etc > /dev/null 2>&1
		systemctl stop smbd winbind systemd-resolved > /dev/null 2>&1
		systemctl disable smbd nmbd winbind systemd-resolved > /dev/null 2>&1
		systemctl start samba-ad-dc > /dev/null 2>&1
		systemctl enable samba-ad-dc > /dev/null 2>&1
		systemctl unmask samba-ad-dc > /dev/null 2>&1
		systemctl enable samba-ad-dc > /dev/null 2>&1
		systemctl restart samba-ad-dc > /dev/null 2>&1
		systemctl start samba-ad-dc > /dev/null 2>&1
		{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
		eval
		check_p
	fi
}
config_apache()
{
	echo -e -n "\e[93mApache... \e[0m"
	load &
	spin_pid=$!
	systemctl start apache2 > /dev/null 2>&1
	systemctl enable apache2 > /dev/null 2>&1
	systemctl status apache2 > /dev/null 2>&1
	{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
	eval #proc ok
	check_p
}
config_ufw() #Configuracion del funcionamiento y estado del firewall
{
	echo -e -n "\e[93mUfw... \e[0m"
	load &
	spin_pid=$!
	ufw allow 'Apache' > /dev/null 2>&1
	ufw allow 10000/tcp > /dev/null 2>&1
	if [[ `/usr/sbin/ufw status > /dev/null 2>&1 | cut -d":" -f2 | xargs` == "inactive" ]]
	then
	read -N1 -s -p "Firewall (ufw) it's not enabled. Enable it? (y/n)" ufw
	[ $ufw = "y" ] && ufw enable > /dev/null 2>&1; check_p;
	else
	{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
	eval #proc ok
	check_p
	fi
}
config_network()
{
	echo -e -n "\e[93mNetwork... \e[0m"
	read -N1 -s -p "Change network config? (y/n) " change_net

		if [ $change_net = "y" ]; then
			for target in ${interfaces[@]}
			do
			ps aux | grep -v grep | awk '{print $11}' | grep $target >/dev/null 2>&1
					if [ $? = 0 ]; then
					if [ $target = "NetworkManager" ] && [ $net_f = 0 ]; then net_interfaces; echo $((net_f++)) > /dev/null 2>&1;fi
					#if [ $target = "Networkd" ] && [ $net_f = 0 ]; then net_netplan; $((net_f++));fi
					else echo $((net_nf++)) > /dev/null 2>&1
					fi
			done
			if [ $net_nf = ${#interfaces[@]} ]; then echo -e "\e[91mERROR:\e[0m Network target not found x$$, changing default..."; net_interfaces; fi
		else echo -e -n "\r\e[93mNetwork...                                      \e[0m"
		     echo -e -n "\r\e[93mNetwork...  \e[0m"
		     load &
		     spin_pid=$!
		     sleep 2.5
		     { kill $spin_pid && wait $spin_pid; } 2>/dev/null
		     eval #proc ok
		     check_p
		     grep "namserver 127.0.0.1" /etc/resolv.conf
		     [ $? != 0 ] && echo "nameserver 127.0.0.1" > /etc/resolv.conf
		fi
}
net_interfaces()
{
echo -e -n "#/etc/network/interfaces generated with ""UserSysM -p domain_create ${USM} ${DMC}""\nUncomment lines below for enable each interface.\n\n#Loopback network\n#auto lo\n#iface lo inet loopback\n\n#Primary network\n#allow-hotplug enp0s3\n#iface enp0s3 inet dhcp\n\n" > /etc/network/interfaces
net=("Adapter" \ "Ip" \ "Network" \ "Netmask")
clean_stat
echo -e -n "\r\e[93mNetwork... \e[0mNÂº Targets: "
read n_target
for (( c=1; c<=$n_target; c++ ))
do
echo -e "\e[32m<=========>\e[0m"
	for i in ${net[@]}
	do
	echo -e -n "\r$i [$c]: "
	read $i
	done
	echo -e "auto $Adapter\niface $Adapter inet static\naddress $Ip\nnetmask $Netmask\nnetwork $Network" >> /etc/network/interfaces
done
nano /etc/network/interfaces
/etc/init.d/NetworkManager restart > /dev/null 2>&1
/etc/init.d/networking.service > /dev/null 2>&1
/etc/init.d/networking restart > /dev/null 2>&1
/usr/sbin/dhclient > /dev/null 2>&1
check_p
}
net_netplan()
{
eval
}
config_all()
{
	config_samba
	config_apache
	config_ufw
	config_network
	config_structure
}
clean_stat()
{
echo -e -n "\r                                                                                "
}
kill_spin()
{
{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
}
spin()
{
load &
spin_pid=$!
}
config_structure()
{
	echo -e -n "\e[93mGenerating structure... \e[0m"
	spin
	#usuarios
	for u in ${users[@]}
	do
	samba-tool user create "$u" "12345abcd." 2> /dev/null
	done
	sleep 0.6
	mkdir /srv/samba /srv/samba/comun /srv/samba/dam1 /srv/samba/dam2 /srv/samba/departamentos /srv/samba/usuarios /srv/samba/usuarios/personas /srv/samba/usuarios/personas/profes /srv/samba/usuarios/personas/alumnos /srv/samba/usuarios/  personas/alumnos/dam1 /srv/samba/usuarios/personas/alumnos/dam2 /srv/samba/usuarios/perfwindows /srv/samba/usuarios/perflinux > /dev/null 2>&1
	clean_stat
	kill_spin
	samba-tool ou create 'OU=USUARIOS,DC=yago,DC=local' > /dev/null 2>&1
	echo -e -n "\r\e[93mAdding folders links... \e[0m"
	spin
	grep "include = /etc/samba/smb.conf.share" /etc/samba/smb.conf > /dev/null 2>&1
	[ $? != 0 ] && echo "include = /etc/samba/smb.conf.share" > /etc/samba/smb.conf
	


kill_spin
eval
check_p
}

[ "$UID" != "0" ] && echo -e "\e[93mWARNING:\e[0m It's recomended to execute as root to prevent any error." && exit
	# Array con los paquetes necesarios para todo el proceso
	packages=("krb5-config" \ "samba" \ "smbclient" \ "winbind" \ "apache2" \ "ufw" \ "webmin" \ "wget" \ "openssl" \ "ntp" \ "tree")
	interfaces=("NetworkManager" \ "Networkd")
	users=("sol" \ "mon" \ "tom" \ "pia" \ "paz" \ "noe")
	smb_folder=("profiles" \ "shares")
	smb_parm=()
	net_nf=0
	net_f=0
	once=0
	if [ -z $1 ]; then
	grep "deb http://download.webmin.com/download/repository sarge contrib" /etc/apt/sources.list > /dev/null 2>&1
		if [ $? != 0 ]; then
		echo -n -e "\rModifying apt resources...  "
		load &
		spin_pid=$!
		sleep .8
		echo "deb http://download.webmin.com/download/repository sarge contrib" >> /etc/apt/sources.list
		{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
		echo -n -e "\rLoading rep from archive.ubuntu.com...  "
		load &
		spin_pid=$!
		wget http://www.webmin.com/jcameron-key.asc > /dev/null 2>&1
		apt-key add jcameron-key.asc > /dev/null 2>&1
		apt update > /dev/null 2>&1
		rm jcameron-key.asc > /dev/null 2>&1
		{ kill $spin_pid && wait $spin_pid; } 2>/dev/null
		fi
	# Comprueba las dependencias
	echo -e -n "\rChecking resources dependencies...  "
		for i in "${packages[@]}"
		do
		dpkg -s $i > /dev/null 2>&1
			add
		sleep 0.2
		done
	[ "${falta}" != "" ] && confirm_install || config_all
	else
	invalid_in1="\e[91mERROR:\e[0m Invalid argument ($1)"
	invalid_in2="\e[91mERROR:\e[0m Invalid argument ($2)"
	missing="\e[91mERROR:\e[0m One or more arguments are missing"
		case $1 in
		user)	case $2 in
			create);;
			add);;
			delete);;
			"")echo -e $missing;;
			*)echo -e $invalid_in2;;
			esac;;
		time);;
		-p)config_$2;;
		"")echo -e $missing;;
		*)echo -e $invalid_in1;;
		esac

fi

